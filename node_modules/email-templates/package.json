{
  "_from": "email-templates@4.0.3",
  "_id": "email-templates@4.0.3",
  "_inBundle": false,
  "_integrity": "sha512-3ZzA17X0Qq3sOyGf//hbteiTucTr//5yf7D+p9TxjIue4GP1pFNUiWJYdyCpMepQ1mhJB1DZ0IBTd6pT4J2ScQ==",
  "_location": "/email-templates",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "email-templates",
    "fetchSpec": "4.0.3",
    "name": "email-templates",
    "raw": "email-templates@4.0.3",
    "rawSpec": "4.0.3",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/email-templates/-/email-templates-4.0.3.tgz",
  "_shasum": "d5991b22b5a92591285f8c7eb26e2b8ec25d2661",
  "_shrinkwrap": null,
  "_spec": "email-templates@4.0.3",
  "_where": "/home/kev/express/finditkenya",
  "author": {
    "email": "niftylettuce@gmail.com",
    "name": "Nick Baugh",
    "url": "http://niftylettuce.com"
  },
  "bugs": {
    "email": "niftylettuce@gmail.com",
    "url": "https://github.com/niftylettuce/email-templates/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Nick Baugh",
      "email": "niftylettuce@gmail.com",
      "url": "http://niftylettuce.com"
    }
  ],
  "dependencies": {
    "@ladjs/i18n": "^0.3.2",
    "auto-bind": "^1.2.1",
    "bluebird": "^3.5.1",
    "consolidate": "^0.15.1",
    "debug": "^3.1.0",
    "get-paths": "^0.0.2",
    "html-to-text": "^4.0.0",
    "juice": "^4.3.2",
    "juice-resources-promise": "^0.0.2",
    "lodash": "^4.17.10",
    "nodemailer": "^4.6.7",
    "preview-email": "^0.0.7"
  },
  "deprecated": false,
  "description": "Create, preview, and send custom email templates for Node.js. Highly configurable and supports automatic inline CSS, stylesheets, embedded images and fonts, and much more! Made for sending beautiful emails with Lad.",
  "devDependencies": {
    "ava": "^0.25.0",
    "babel-cli": "^6.26.0",
    "babel-preset-env": "^1.7.0",
    "cheerio": "^1.0.0-rc.2",
    "codecov": "^3.0.4",
    "cross-env": "^5.2.0",
    "eslint": "^5.2.0",
    "eslint-config-prettier": "^2.9.0",
    "eslint-plugin-prettier": "^2.6.2",
    "husky": "^0.14.3",
    "lint-staged": "^7.2.0",
    "nyc": "^12.0.2",
    "prettier": "^1.14.0",
    "pug": "^2.0.3",
    "remark-cli": "^5.0.0",
    "remark-preset-github": "^0.0.8",
    "xo": "^0.21.1"
  },
  "engines": {
    "node": ">=6.4.0"
  },
  "files": [
    "lib",
    "locales"
  ],
  "homepage": "https://github.com/niftylettuce/email-templates",
  "keywords": [
    "consolidate",
    "email",
    "engine",
    "koa",
    "lad",
    "lass",
    "mailchimp",
    "mailgun",
    "mandrill",
    "moonmail",
    "nodemailer",
    "postmark",
    "pug",
    "sendgrid",
    "template",
    "templates",
    "transport"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.md": [
      "git add",
      "remark . -qfo"
    ],
    "*.{js,jsx,mjs,ts,tsx,css,less,scss,json,graphql}": [
      "git add",
      "prettier --write --single-quote --trailing-comma none"
    ]
  },
  "main": "lib/index.js",
  "name": "email-templates",
  "optionalDependencies": {},
  "readme": "# [**Email Templates**](https://github.com/niftylettuce/email-templates)\n\n[![build status](https://img.shields.io/travis/niftylettuce/email-templates.svg)](https://travis-ci.org/niftylettuce/email-templates)\n[![code coverage](https://img.shields.io/codecov/c/github/niftylettuce/email-templates.svg)](https://codecov.io/gh/niftylettuce/email-templates)\n[![code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![made with lass](https://img.shields.io/badge/made_with-lass-95CC28.svg)](https://lass.js.org)\n[![license](https://img.shields.io/github/license/niftylettuce/email-templates.svg)](LICENSE)\n\n> Create, [preview][preview-email], and send custom email templates for [Node.js][node]. Highly configurable and supports automatic inline CSS, stylesheets, embedded images and fonts, and much more! Made for sending beautiful emails with [Lad][].\n>\n> **Still on v2.x?**: v3.x is released (you'll need Node v6.4.0+); see [breaking changes below](#v3-breaking-changes). [2.x branch][2-x-branch] docs available if necessary.\n\n\n## Table of Contents\n\n* [Install](#install)\n* [Preview](#preview)\n* [Usage](#usage)\n  * [Debugging](#debugging)\n  * [Basic](#basic)\n  * [Attachments](#attachments)\n  * [Automatic Inline CSS via Stylesheets](#automatic-inline-css-via-stylesheets)\n  * [Render HTML and/or Text](#render-html-andor-text)\n  * [Cache Pug Templates](#cache-pug-templates)\n  * [Localization](#localization)\n  * [Text-Only Email (no HTML)](#text-only-email-no-html)\n  * [Prefix Subject Lines](#prefix-subject-lines)\n  * [Custom Text Template](#custom-text-template)\n  * [Custom Template Engine (e.g. EJS)](#custom-template-engine-eg-ejs)\n  * [Custom Default Message Options](#custom-default-message-options)\n  * [Custom Rendering (e.g. from a MongoDB database)](#custom-rendering-eg-from-a-mongodb-database)\n* [Options](#options)\n* [Plugins](#plugins)\n* [V3 Breaking Changes](#v3-breaking-changes)\n* [Tip](#tip)\n* [Contributors](#contributors)\n* [License](#license)\n\n\n## Install\n\n> By default we recommend [pug][] for your template engine, but you can use [any template engine][supported-engines].\n\n[npm][]:\n\n```sh\nnpm install email-templates pug\n```\n\n[yarn][]:\n\n```sh\nyarn add email-templates pug\n```\n\n\n## Preview\n\nWe've added [preview-email][] by default to this package!\n\nThis means that (by default) in the development environment (e.g. `NODE_ENV=development`) your emails will be rendered to the tmp directory for you and automatically opened in the browser.\n\n<a target=\"_blank\" href=\"https://github.com/niftylettuce/preview-email/blob/master/demo.png\">View the demo</a>\n\n\n## Usage\n\n> **UPGRADING?** If you are upgrading from v2 to v3, see [v3 Breaking Changes](#v3-breaking-changes) below.  You'll need Node v6.4.0+ now.\n\n### Debugging\n\n#### Environment Flag\n\nIf you run into any issues with configuration, files, templates, locals, etc, then you can use the `DEBUG` environment flag:\n\n```sh\nDEBUG=email-templates node app.js\n```\n\nThis will output to the console all debug statements in our codebase for this package.\n\n#### Inspect Message\n\nAs of v3.6.1 you can now inspect the message passed to `nodemailer.sendMail` internally.\n\nIn the response object from `email.send`, you have access to `res.originalMessage`:\n\n```js\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(res => {\n    console.log('res.originalMessage', res.originalMessage)\n  });\n  .catch(console.error);\n```\n\n### Basic\n\n> You can swap the `transport` option with a [Nodemailer transport][nodemailer-transport] configuration object or transport instance. We highly recommend using [Postmark][] for your transport (it's the default in [Lad][]).\n>\n> If you want to send emails in `development` or `test` environments, set `options.send` to `true`.\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com'\n  },\n  // uncomment below to send emails in development/test env:\n  // send: true\n  transport: {\n    jsonTransport: true\n  }\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThe example above assumes you have the following directory structure:\n\n```sh\n.\n├── app.js\n└── emails\n    └── mars\n        ├── html.pug\n        └── subject.pug\n```\n\nAnd the contents of the `pug` files are:\n\n> `html.pug`:\n\n```pug\np Hi #{name},\np Welcome to Mars, the red planet.\n```\n\n> `subject.pug`:\n\n```pug\n= `Hi ${name}, welcome to Mars`\n```\n\n### Attachments\n\nPlease reference [Nodemailer's attachment documentation][attachments] for further reference.\n\n> If you want to set default attachments sent with every email:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com',\n    attachments: [\n      {\n        filename: 'text1.txt',\n        content: 'hello world!'\n      }\n    ]\n  }\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n> If you want to set attachments sent individually:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com'\n  },\n  transport: {\n    jsonTransport: true\n  }\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com',\n      attachments: [\n        {\n          filename: 'text1.txt',\n          content: 'hello world!'\n        }\n      ]\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n### Automatic Inline CSS via Stylesheets\n\nSimply include the path or URL to the stylesheet in your template's `<head>`:\n\n```pug\nlink(rel=\"stylesheet\", href=\"/css/app.css\", data-inline)\n```\n\nThis will look for the file `/css/app.css` in the `build/` folder.\n\nIf this asset is in another folder, then you will need to modify the default options when creating an `Email` instance:\n\n```js\nconst email = new Email({\n  // <https://github.com/Automattic/juice>\n  juice: true,\n  juiceResources: {\n    preserveImportant: true,\n    webResources: {\n      //\n      // this is the relative directory to your CSS/image assets\n      // and its default path is `build/`:\n      //\n      // e.g. if you have the following in the `<head`> of your template:\n      // `<link rel=\"stylesheet\" href=\"style.css\" data-inline=\"data-inline\">`\n      // then this assumes that the file `build/style.css` exists\n      //\n      relativeTo: path.resolve('build')\n      //\n      // but you might want to change it to something like:\n      // relativeTo: path.join(__dirname, '..', 'assets')\n      // (so that you can re-use CSS/images that are used in your web-app)\n      //\n    }\n  }\n});\n```\n\n### Render HTML and/or Text\n\nIf you don't need this module to send your email, you can still use it to render HTML and/or text templates.\n\nSimply use the `email.render(view, locals)` method we expose (it's the same method that `email.send` uses internally).\n\n> If you need to render a specific email template file (e.g. the HTML version):\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email();\n\nemail\n  .render('mars/html', {\n    name: 'Elon'\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThe example above assumes you have the following directory structure (note that this example would only render the `html.pug` file):\n\n```sh\n.\n├── app.js\n└── emails\n    └── mars\n        ├── html.pug\n        ├── text.pug\n        └── subject.pug\n```\n\nThe Promise for `email.render` resolves with a String (the HTML or text rendered).\n\n> If you need to render all available template files for a given email template (e.g. `html.pug`, `text.pug`, and `subject.pug` – you can use `email.renderAll` (this is the method that `email.send` uses).\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email();\n\nemail\n  .renderAll('mars', {\n    name: 'Elon'\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n> If you need to render multiple, specific templates at once (but not all email templates available), then you can use `Promise.all` in combination with `email.render`:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email();\nconst locals = { name: 'Elon' };\n\nPromise\n  .all([\n    email.render('mars/html', locals),\n    email.render('mars/text', locals)\n  ])\n  .then(([ html, text ]) => {\n    console.log('html', html);\n    console.log('text', text);\n  })\n  .catch(console.error);\n```\n\n### Cache Pug Templates\n\nWe strongly suggest to follow this example and pre-cache your templates with [cache-pug-templates][] (if you're using the default [Pug][] template engine).\n\nIf you do not do this, then your Pug templates will re-compile and re-cache every time you deploy new code and restart your app.\n\n1. Ensure you have [Redis][] (v4.x+) installed:\n\n   * Mac: `brew install redis && brew services start redis`\n   * Ubuntu:\n\n     ```sh\n     sudo add-apt-repository -y ppa:chris-lea/redis-server\n     sudo apt-get update\n     sudo apt-get -y install redis-server\n     ```\n\n2. Install the packages:\n\n   [npm][]:\n\n   ```sh\n   npm install cache-pug-templates redis\n   ```\n\n   [yarn][]:\n\n   ```sh\n   yarn add cache-pug-templates redis\n   ```\n\n3. Configure it to read and cache your entire email templates directory:\n\n   ```js\n   const path = require('path');\n   const cachePugTemplates = require('cache-pug-templates');\n   const redis = require('redis');\n   const Email = require('email-templates');\n\n   const redisClient = redis.createClient();\n   const email = new Email({\n     message: {\n       from: 'niftylettuce@gmail.com'\n     },\n     transport: {\n       jsonTransport: true\n     }\n   });\n\n   cachePugTemplates(redisClient, email.config.views.root);\n\n   // ...\n   ```\n\n4. For more configuration options see [cache-pug-templates][].\n\n### Localization\n\nAll you need to do is simply pass an [i18n][] configuration object as `config.i18n` (or an empty one as this example shows to use defaults).\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  i18n: {} // <------ HERE\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      locale: 'en', // <------ CUSTOMIZE LOCALE HERE (defaults to `i18n.defaultLocale` - `en`)\n      // is your user french?\n      // locale: 'fr',\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\nThen slightly modify your templates to use localization functions.\n\n> `html.pug`:\n\n```pug\np= t(`Hi ${name},`)\np= t('Welcome to Mars, the red planet.')\n```\n\n> `subject.pug`:\n\n```pug\n= t(`Hi ${name}, welcome to Mars`)\n```\n\nNote that if you use [Lad][], you have a built-in filter called `translate`:\n\n```pug\np: :translate(locale) Hi #{name}\np: :translate(locale) Welcome to Mars, the red planet.\n```\n\n### Text-Only Email (no HTML)\n\nIf you wish to have only a text-based version of your email you can simply pass the option `textOnly: true`.\n\nRegardless if you use the `htmlToText` option or not (see next example), it will still render only a text-based version.\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  textOnly: true // <----- HERE\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n### Prefix Subject Lines\n\nYou can pass an option to prefix subject lines with a string, which is super useful for deciphering development / staging / production environment emails.\n\nFor example, you could make it so on non-production environments the email is prefixed with a `[DEVELOPMENT] Some Subject Line Here`.\n\nYou could do this manually by passing a `message.subject` property, however if you are storing your subject lines in templates (e.g. `subject.ejs` or `subject.pug`) then it's not as easy.\n\nSimply use the `subjectPrefix` option and set it to whatever you wish (**note you will need to append a trailing space if you wish to have a space after the prefix; see example below**):\n\n```js\nconst Email = require('email-templates');\n\nconst env = process.env.NODE_ENV || 'development';\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  subjectPrefix: env === 'production' ? false : `[${env.toUpperCase()}] `; // <--- HERE\n});\n```\n\n### Custom Text Template\n\n> By default we use `html-to-text` to generate a plaintext version and attach it as `message.text`.\n\nIf you'd like to customize the text body, you can pass `message.text` or create a `text` template file just like you normally would for `html` and `subject`.\n\nYou may also set `config.htmlToText: false` to force the usage of the `text` template file.\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com'\n  },\n  transport: {\n    jsonTransport: true\n  },\n  htmlToText: false // <----- HERE\n});\n\nemail\n  .send({\n    template: 'mars',\n    message: {\n      to: 'elon@spacex.com'\n    },\n    locals: {\n      name: 'Elon'\n    }\n  })\n  .then(console.log)\n  .catch(console.error);\n```\n\n> `text.pug`:\n\n```pug\n| Hi #{name},\n| Welcome to Mars, the red planet.\n```\n\n### Custom Template Engine (e.g. EJS)\n\n1. Install your desired template engine (e.g. [EJS][])\n\n   [npm][]:\n\n   ```sh\n   npm install ejs\n   ```\n\n   [yarn][]:\n\n   ```sh\n   yarn add ejs\n   ```\n\n2. Set the extension in options and send an email\n\n   ```js\n   const Email = require('email-templates');\n\n   const email = new Email({\n     message: {\n       from: 'niftylettuce@gmail.com'\n     },\n     transport: {\n       jsonTransport: true\n     },\n     views: {\n       options: {\n         extension: 'ejs' // <---- HERE\n       }\n     }\n   });\n   ```\n\n### Custom Default Message Options\n\nYou can configure your Email instance to have default message options, such as a default \"From\", an unsubscribe header, etc.\n\nFor a list of all available message options and fields see [the Nodemailer message reference](https://nodemailer.com/message/).\n\n> Here's an example showing how to set a default custom header and a list unsubscribe header:\n\n```js\nconst Email = require('email-templates');\n\nconst email = new Email({\n  message: {\n    from: 'niftylettuce@gmail.com',\n    headers: {\n      'X-Some-Custom-Thing': 'Some-Value'\n    },\n    list: {\n      unsubscribe: 'https://niftylettuce.com/unsubscribe'\n    }\n  },\n  transport: {\n    jsonTransport: true\n  }\n});\n```\n\n### Custom Rendering (e.g. from a MongoDB database)\n\nYou can pass a custom `config.render` function which accepts two arguments `view` and `locals` and must return a `Promise`.\n\nNote that if you specify a custom `config.render`, you should have it use `email.juiceResources` before returning the final HTML.  The example below shows how to do this.\n\nIf you wanted to read a stored EJS template from MongoDB, you could do something like:\n\n```js\nconst ejs = require('ejs');\n\nconst email = new Email({\n  // ...\n  render: (view, locals) => {\n    return new Promise((resolve, reject) => {\n      // this example assumes that `template` returned\n      // is an ejs-based template string\n      db.templates.findOne({ view }, (err, template) => {\n        if (err) return reject(err);\n        if (!template) return reject(new Error('Template not found'));\n        let html = ejs.render(template, locals);\n        html = await email.juiceResources(html);\n        resolve(html);\n      });\n    });\n  }\n});\n```\n\n\n## Options\n\nFor a list of all available options and defaults [view the configuration object](src/index.js).\n\n\n## Plugins\n\nYou can use any [nodemailer][] plugin. Simply pass an existing transport instance as `config.transport`.\n\nYou should add the [nodemailer-base64-to-s3][] plugin to convert base64 inline images to actual images stored on Amazon S3 and Cloudfront.\n\nWhen doing so (as of v4.0.2+), you will need to adjust your `email-templates` configuration to pass `images: true` as such:\n\n```js\nconst email = new Email({\n  // ...\n  juiceResources: {\n    preserveImportant: true,\n    webResources: {\n      relativeTo: path.resolve('build'),\n      images: true // <--- set this as `true`\n    }\n  }\n});\n```\n\nWe also highly recommend to add to your default `config.locals` the following:\n\n* [custom-fonts-in-emails][] - render any font in emails as an image w/retina support (no more Photoshop or Sketch exports!)\n* [font-awesome-assets][] - render any [Font Awesome][fa] icon as an image in an email w/retina support (no more Photoshop or Sketch exports!)\n\n\n## V3 Breaking Changes\n\n> If you are upgrading from v2 or prior to v3, please note that the following breaking API changes occurred:\n\n1. You need to have Node v6.4.0+, we recommend using [nvm](https://github.com/creationix/nvm) to manage your Node versions.\n\n2. Instead of calling `const newsletter = new EmailTemplate(...args)`, you now call `const email = new Email(options)`.\n\n   * The arguments you pass to the constructor have changed as well.\n   * Previously you'd pass `new EmailTemplate(templateDir, options)`.  Now you will need to pass simply one object with a configuration as an argument to the constructor.\n   * If your `templateDir` path is the \"emails\" folder in the root of your project (basically `./emails` folder) then you do not need to pass it at all since it is the default per the [configuration object](src/index.js).\n   * The previous value for `templateDir` can be used as such:\n\n   ```diff\n   -const newsletter = new EmailTemplate(templateDir);\n   +const email = new Email({\n   +  views: { root: templateDir }\n   +});\n   ```\n\n   * Note that if you are inlining CSS, you should also make sure that the option for `juiceResources.webResources.relativeTo` is accurate.\n\n3. Instead of calling `newsletter.render(locals, callback)` you now call `email.render(template, locals)`.  The return value of `email.render` when invoked is a `Promise` and does not accept a callback function.\n\n   > **NOTE**: `email-templates` v3 now has an `email.send` method ([see basic usage example](#basic)) which uses `nodemailer`; you should now use `email.send` instead of `email.render`!\n\n   ```diff\n   -newsletter.render({}, (err, result) => {\n   -  if (err) return console.error(err);\n   -  console.log(result);\n   -});\n   +email.render(template, {}).then(console.log).catch(console.error);\n   ```\n\n4. Localized template directories are no longer supported.  We now support i18n translations out of the box.  See [Localization](#localization) for more info.\n\n5. A new method `email.send` has been added.  This allows you to create a Nodemailer transport and send an email template all at once (it calls `email.render` internally).  See the [Basic](#basic) usage documentation above for an example.\n\n6. There are new options `options.send` and `options.preview`.  Both are Boolean values and configured automatically based off the environment.  Take a look at the [configuration object](src/index.js).\n\n7. If you wish to send emails in development or test environment (disabled by default), set `options.send` to `true`.\n\n\n## Tip\n\nInstead of having to configure this for yourself, you could just use [Lad][] instead.\n\n\n## Contributors\n\n| Name           | Website                   |\n| -------------- | ------------------------- |\n| **Nick Baugh** | <http://niftylettuce.com> |\n\n\n## License\n\n[MIT](LICENSE) © [Nick Baugh](http://niftylettuce.com)\n\n\n## \n\n[node]: https://nodejs.org\n\n[npm]: https://www.npmjs.com/\n\n[yarn]: https://yarnpkg.com/\n\n[pug]: https://pugjs.org\n\n[supported-engines]: https://github.com/tj/consolidate.js/#supported-template-engines\n\n[nodemailer]: https://nodemailer.com/plugins/\n\n[font-awesome-assets]: https://github.com/ladjs/font-awesome-assets\n\n[custom-fonts-in-emails]: https://github.com/ladjs/custom-fonts-in-emails\n\n[nodemailer-base64-to-s3]: https://github.com/ladjs/nodemailer-base64-to-s3\n\n[lad]: https://lad.js.org\n\n[2-x-branch]: https://github.com/niftylettuce/node-email-templates/tree/2.x\n\n[i18n]: https://github.com/ladjs/i18n#options\n\n[fa]: http://fontawesome.io/\n\n[nodemailer-transport]: https://nodemailer.com/transports/\n\n[postmark]: https://postmarkapp.com/\n\n[ejs]: http://ejs.co/\n\n[cache-pug-templates]: https://github.com/ladjs/cache-pug-templates\n\n[redis]: https://redis.io/\n\n[preview-email]: https://github.com/niftylettuce/preview-email\n\n[attachments]: https://nodemailer.com/message/attachments/\n",
  "readmeFilename": "README.md",
  "remarkConfig": {
    "plugins": [
      "preset-github"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/niftylettuce/email-templates.git"
  },
  "scripts": {
    "ava": "cross-env NODE_ENV=test ava",
    "build": "babel src --out-dir lib",
    "coverage": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "lint": "xo && remark . -qfo",
    "nyc": "cross-env NODE_ENV=test nyc ava",
    "precommit": "lint-staged && npm test",
    "test": "npm run build && npm run lint && npm run ava",
    "test-coverage": "npm run build && npm run lint && npm run nyc",
    "watch": "babel src --watch --out-dir lib"
  },
  "version": "4.0.3",
  "xo": {
    "extends": "prettier",
    "ignores": [
      "config.js"
    ],
    "parserOptions": {
      "sourceType": "script"
    },
    "plugins": [
      "prettier"
    ],
    "rules": {
      "camelcase": "off",
      "capitalized-comments": "off",
      "max-len": [
        {
          "code": 80,
          "ignoreUrls": true
        },
        "error"
      ],
      "no-use-extend-native/no-use-extend-native": "off",
      "no-warning-comments": "off",
      "prettier/prettier": [
        {
          "singleQuote": true,
          "bracketSpacing": true,
          "trailingComma": "none"
        },
        "error"
      ]
    },
    "space": true
  }
}

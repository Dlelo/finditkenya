{
  "_from": "node-suggestive-search",
  "_id": "node-suggestive-search@1.9.2",
  "_inBundle": false,
  "_integrity": "sha512-eesmwpyhe46BwAXdyLKuMdinh1qlYULdMJ971iPzkVffLJlAFItZHUg4mhnBifNHIvDzP2jAvzZS9tiw83sVwQ==",
  "_location": "/node-suggestive-search",
  "_phantomChildren": {
    "bson": "1.0.4",
    "buffer-shims": "1.0.0",
    "core-util-is": "1.0.2",
    "es6-promise": "3.2.1",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "process-nextick-args": "1.0.7",
    "require_optional": "1.0.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "escapedName": "node-suggestive-search",
    "fetchSpec": "latest",
    "name": "node-suggestive-search",
    "raw": "node-suggestive-search",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-suggestive-search/-/node-suggestive-search-1.9.2.tgz",
  "_shasum": "f525c7c2aa7141aef8744beafc7268e6cf728d92",
  "_shrinkwrap": null,
  "_spec": "node-suggestive-search",
  "_where": "/home/kev/express/findit",
  "author": {
    "email": "ivanvaladares@hotmail.com",
    "name": "Ivan Valadares"
  },
  "bugs": {
    "url": "https://github.com/ivanvaladares/Node-Suggestive-Search/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "lodash": "^4.17.4",
    "mongodb": "2.2.19",
    "nedb": "^1.8.0",
    "redis": "^2.8.0"
  },
  "deprecated": false,
  "description": "A node module to help type-ahead and dropdown search boxes and also correct misspelled searches (did you mean?).",
  "devDependencies": {
    "eslint": "^4.7.2",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.2.0",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "mocha": "^3.5.3"
  },
  "homepage": "https://github.com/ivanvaladares/Node-Suggestive-Search#readme",
  "keywords": [
    "dictionary",
    "misspell",
    "search",
    "suggestive"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ivanvaladares/Node-Suggestive-Search/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "name": "node-suggestive-search",
  "optionalDependencies": {},
  "readme": "# Node suggestive search\r\nA node module to help type-ahead and dropdown search boxes and also correct misspelled searches (did you mean?).\r\n\r\n\r\nThis module is compatible with:\r\n- Redis Node.JS Client 2.8.0, Client to connect with Redis https://www.npmjs.com/package/redis\r\n- MongoDB Node.JS Driver 2.2.19, Driver to connect with MongoDB http://mongodb.github.io/node-mongodb-native/\r\n- NeDB 1.8.0, The JavaScript Database from Louis Chatriot https://github.com/louischatriot/nedb\r\n\r\n\r\n## Installation, tests\r\nModule name on npm is \"node-suggestive-search\".\r\n\r\n```\r\nnpm install node-suggestive-search --save   # Install the latest version in your project\r\n```\r\n\r\n\r\n## Example of usage\r\nhttps://ivanvaladares.herokuapp.com\r\n\r\n## Playground on Runkit\r\nhttps://runkit.com/ivanvaladares/node-suggestive-search-1.9.2\r\n\r\n\r\n## API\r\n* <a href=\"#Setting-options\">Setting options</a>\r\n* <a href=\"#loading-a-database\">Loading a database</a>\r\n* <a href=\"#searching-for-items\">Searching for items</a>\r\n* <a href=\"#getting-words-suggestions\">Getting words suggestions</a>\r\n* <a href=\"#getting-items-suggestions\">Getting items suggestions</a>\r\n* <a href=\"#insert-items\">Insert items</a>\r\n* <a href=\"#remove-items\">Remove items</a>\r\n\r\n\r\n### Setting options\r\nThis module supports Redis, MongoDB and NeDB but you can use an in-memory volatile cache.\r\n\r\nConfiguration without database (in-memory):\r\n```javascript\r\nvar nss = require('node-suggestive-search').init();\r\n\r\n```\r\nConfiguration using Redis: \r\n```javascript\r\nvar nss = require('node-suggestive-search').init(\r\n\t\t\t{\r\n\t\t\tdataBase: \"redis\", \r\n\t\t\tredisDatabase: \"redis://localhost:6379\",\r\n\t\t\tcache: true\r\n\t\t\t});\r\n\r\n```\r\nConfiguration using MongoDB: \r\n```javascript\r\nvar nss = require('node-suggestive-search').init(\r\n\t\t\t{\r\n\t\t\tdataBase: \"mongodb\", \r\n\t\t\tmongoDatabase: \"mongodb://127.0.0.1:27017/nodeSugestiveSearch\",\r\n\t\t\tcache: true\r\n\t\t\t});\r\n\r\n```\r\nConfiguration using NeDB with a datafile: \r\n```javascript\r\nvar nss = require('node-suggestive-search').init(\r\n\t\t\t{\r\n\t\t\tdataBase: \"nedb\", \r\n\t\t\tneDbDataPath: \"dataFolder\",\r\n\t\t\tneDbInMemoryOnly: false,\r\n\t\t\tcache: true\r\n\t\t\t});\r\n\r\n```\r\nConfiguration using NeDB without a datafile (in-memory): \r\n```javascript\r\nvar nss = require('node-suggestive-search').init(\r\n\t\t\t{\r\n\t\t\tdataBase: \"nedb\", \r\n\t\t\tneDbDataPath: \"\",\r\n\t\t\tneDbInMemoryOnly: true,\r\n\t\t\tcache: false\r\n\t\t\t});\r\n\r\n```\r\n\r\nThe \"cache\" option enables an in-memory copy of the data structure boosting the performance. If you have more than one instance accessing the same database, turn off this option. \r\n\r\n\r\n### Loading a database\r\nBuild a dictionary composed by items and words that need to be searched. \r\n\r\nExample of a JSON to be imported (Items.json): \r\n```javascript\r\n[  \r\n   {  \r\n      \"itemName\":\"WHISKY RED LABEL\",\r\n      \"itemId\":\"1\",\r\n      \"keywords\":\"FANCY\" \r\n   },\r\n   {  \r\n      \"itemName\":\"WHISKY BLACK LABEL\",\r\n      \"itemId\":\"2\",\r\n      \"keywords\":\"EXPENSIVE\"\r\n   },\r\n   {  \r\n      \"itemName\":\"BLACK FOREST LABELY HAM L/S\",\r\n      \"itemId\":\"3\"\r\n   },\r\n   {  \r\n      \"itemName\":\"PESTO PARMESAN HAM\",\r\n      \"itemId\":\"4\"\r\n   },\r\n   {  \r\n      \"itemName\":\"DELI SWEET SLICE SMOKED HAM\",\r\n      \"itemId\":\"5\"\r\n   }  \r\n]\r\n```\r\n\r\nLoad the JSON from file\r\n```javascript\r\n\r\nnss.loadJson(\"Items.json\", \"utf8\").then( //you can change the charset to match your file\r\n\tdata => {\r\n\t\t// response: { words: 17, items: 5, timeElapsed: '4ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\nLoad the JSON from file with your properties names\r\n```javascript\r\n\r\nnss.loadJson(\"Items.json\", \"utf8\", \"itemId\", \"itemName\", \"keywords\").then(\r\n\tdata => {\r\n\t\t// response: { words: 17, items: 5, timeElapsed: '3ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\nLoad the JSON from string\r\n```javascript\r\n\r\nlet jSonString = `[{\"itemName\":\"WHISKY RED LABEL\", \"itemId\":\"1\", \"keywords\": \"fancy\"},{  \r\n\t\t\t\t\t\"itemName\":\"WHISKY BLACK LABEL\", \"itemId\":\"2\"}]`;\r\n\r\nnss.loadJsonString(jSonString).then(\r\n\tdata => {\r\n\t\t// response: { words: 5, items: 2, timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\nLoad the JSON from string with additional fields (price, popularity and thumbImg). You can insert any additional field excluding itemId, itemName and keywords.\r\n```javascript\r\n\r\nlet jSonString = `[{\"itemName\":\"WHISKY RED LABEL\", \"itemId\":\"1\", \"keywords\":\"fancy\", \"price\":25.57, \"popularity\":1, \"thumbImg\":\"whisky-red-label.png\"},{  \r\n\t\t\t\t\t\"itemName\":\"WHISKY BLACK LABEL\", \"itemId\":\"2\", \"price\":19.99, \"popularity\":0.9, \"thumbImg\":\"whisky-black-label.png\"}]`;\r\n\r\nnss.loadJsonString(jSonString).then(\r\n\tdata => {\r\n\t\t// response: { words: 5, items: 2, timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\n\r\nLoad the JSON from string with your properties names\r\n```javascript\r\n\r\nlet jSonString = `[{\"nm\":\"WHISKY RED LABEL\", \"id\":\"1\", \"kw\": \"fancy\"},{  \r\n\t\t\t\t\t\"nm\":\"WHISKY BLACK LABEL\", \"id\":\"2\"}]`;\r\n\r\nnss.loadJsonString(jSonString, \"id\", \"nm\", \"kw\").then(\r\n\tdata => {\r\n\t\t// response: { words: 5, items: 2, timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\nLoad the JSON from string with your properties names and additional fields (price, popularity and thumbImg). You can insert any additional field excluding itemId, itemName and keywords.\r\n```javascript\r\n\r\nlet jSonString = `[{\"nm\":\"WHISKY RED LABEL\", \"id\":\"1\", \"kw\":\"fancy\", \"price\":25.57, \"popularity\":1, \"thumbImg\":\"whisky-red-label.png\"},{  \r\n\t\t\t\t\t\"nm\":\"WHISKY BLACK LABEL\", \"id\":\"2\", \"price\":19.99, \"popularity\":0.9, \"thumbImg\":\"whisky-black-label.png\"}]`;\r\n\r\nnss.loadJsonString(jSonString, \"id\", \"nm\", \"kw\").then(\r\n\tdata => {\r\n\t\t// response: { words: 5, items: 2, timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\n\r\n\r\n\r\n### Searching for items\r\nGetting itemsId from searched words.\r\n\r\nExamples of how to call the api and responses:\r\n```javascript\r\n\r\nnss.query(\"whisky\").then(\r\n\tdata => {\r\n\t\t//response:  { query: 'whisky', words: [ 'WHISKY' ], missingWords: [], expressions: [], missingExpressions: [], itemsId: [ '1', '2' ], timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//did you mean search result\r\nnss.query(\"wisk\").then( //misspelled search criteria\r\n\tdata => {\r\n\t\t//response: { query: 'wisk', words: [ 'WHISKY' ], missingWords: [], expressions: [], missingExpressions: [], itemsId: [ '1', '2' ], timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//did you mean search result\r\nnss.query(\"wisk read lbel\").then( //misspelled search criteria\r\n\tdata => {\r\n\t\t//response: { query: 'wisk read labl', words: [ 'WHISKY', 'RED', 'LABEL' ], missingWords: [], expressions: [], missingExpressions: [], itemsId: [ '1' ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//query with paramenter returnItemsJson = true  \r\nnss.query(\"whisky\", true).then(\r\n\tdata => {\r\n\t\t/*response:  { query: 'whisky', words: [ 'WHISKY' ], missingWords: [], expressions: [], missingExpressions: [], \r\n\t\t\t[ \r\n\t\t\t\t{ itemName: 'WHISKY RED LABEL', itemId: '1', keywords: 'fancy' },\r\n\t\t\t\t{ itemName: 'WHISKY BLACK LABEL', itemId: '2' } \r\n\t\t\t], \r\n\t\t\ttimeElapsed: '1ms' }\r\n\t\t\t*/\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//query with paramenter returnItemsJson = true and ordering by popularity, desc using an object on a database loaded with additional fields\r\nlet orderByObject = {field: \"popularity\", direction: \"desc\"};\r\n\r\nnss.query(\"whisky\", true, orderByObject).then(\r\n\tdata => {\r\n\t\t/*response:  { query: 'whisky', words: [ 'WHISKY' ], missingWords: [], expressions: [], missingExpressions: [], \r\n\t\t\t[ \r\n\t\t\t\t{ itemName: 'WHISKY RED LABEL', itemId: '1', keywords: 'fancy', price: 25.57, popularity: 1, thumbImg: 'whisky-red-label.png' },\r\n\t\t\t\t{ itemName: 'WHISKY BLACK LABEL', itemId: '2', price: 19.99, popularity: 0.9, thumbImg: 'whisky-black-label.png' } \r\n\t\t\t], \r\n\t\t\ttimeElapsed: '1ms' }\r\n\t\t\t*/\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n\r\n//query with paramenter returnItemsJson = true and ordering by popularity, desc using a function on a database loaded with additional fields\r\nlet orderByFunc = ((x, y) => { return x.popularity < y.popularity; });\r\n\r\nnss.query(\"whisky\", true, orderByFunc).then(\r\n\tdata => {\r\n\t\t/*response:  { query: 'whisky', words: [ 'WHISKY' ], missingWords: [], expressions: [], missingExpressions: [], \r\n\t\t\t[ \r\n\t\t\t\t{ itemName: 'WHISKY RED LABEL', itemId: '1', keywords: 'fancy', price: 25.57, popularity: 1, thumbImg: 'whisky-red-label.png' },\r\n\t\t\t\t{ itemName: 'WHISKY BLACK LABEL', itemId: '2', price: 19.99, popularity: 0.9, thumbImg: 'whisky-black-label.png' } \r\n\t\t\t], \r\n\t\t\ttimeElapsed: '1ms' }\r\n\t\t\t*/\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//quoted search criteria\r\nnss.query(\"'red label'\").then(\r\n\tdata => {\r\n\t\t//response: { query: '\\'red label\\'', words: [ 'RED', 'LABEL' ], missingWords: [], expressions: [ 'red label' ], missingExpressions: [], itemsId: [ '1' ], timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//quoted search criteria\r\nnss.query(\"'label red'\").then(\r\n\tdata => {\r\n\t\t//response: { query: '\\'label red\\'', words: [ 'LABEL', 'RED' ], missingWords: [], expressions: [], missingExpressions: [ 'label red' ], itemsId: [ '1' ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//dashed search criteria\r\nnss.query(\"Red-Blood\").then(\r\n\tdata => {\r\n\t\t//response: { query: 'Red-Blood', words: [ 'RED' ], missingWords: [ 'Blood' ], expressions: [], missingExpressions: [ 'Red-Blood' ], itemsId: [ '1' ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//slashed search criteria\r\nnss.query(\"HAM L/S\").then(\r\n\tdata => {\r\n\t\t//response: { query: 'HAM L/S', words: [ 'HAM', 'L', 'S' ], missingWords: [], expressions: [ 'L/S' ], missingExpressions: [], itemsId: [ '3' ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n//double quoted search criteria\r\nnss.query(\"\\\"HAM L/S\\\"\").then(\r\n\tdata => {\r\n\t\t//response: { query: '\"HAM L/S\"', words: [ 'HAM', 'L', 'S' ], missingWords: [], expressions: [ 'HAM L/S' ], missingExpressions: [], itemsId: [ '3' ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n  \r\n```\r\n\r\n\r\n### Getting words suggestions\r\nGetting words suggestions to fill dropdown boxes or type-ahead text fields.\r\n\r\nExamples of how to call the api and responses:\r\n```javascript\r\n\r\nnss.getSuggestedWords(\"la\").then(\r\n\tdata => {\r\n\t\t//response: { suggestions: [ 'LABEL', 'LABELY' ], timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n\r\nnss.getSuggestedWords(\"whi\").then(\r\n\tdata => {\r\n\t\t//response: { suggestions: [ 'WHISKY LABEL', 'WHISKY RED', 'WHISKY BLACK' ], timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n\r\nnss.getSuggestedWords(\"whisky re\").then(\r\n\tdata => {\r\n\t\t//response: { suggestions: [ 'WHISKY RED' ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n  \r\n```\r\n\r\n\r\n\r\n### Getting items suggestions\r\nGetting items suggestions to fill dropdown boxes or type-ahead text fields.\r\n\r\nExamples of how to call the api and responses:\r\n```javascript\r\n\r\nnss.getSuggestedItems(\"parme\").then(\r\n\tdata => {\r\n\t\t//response: { items: [ { itemId: '4', itemName: 'PESTO PARMESAN HAM' } ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n\r\nnss.getSuggestedItems(\"whisky fancy\").then(\r\n\tdata => {\r\n\t\t//response: { items: [ { itemId: '1', itemName:'WHISKY RED LABEL' } ], timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n\r\nnss.getSuggestedItems(\"whisky re\").then(\r\n\tdata => {\r\n\t\t//response: { items:[ { itemId: '1', itemName: 'WHISKY RED LABEL' } ], timeElapsed: '1ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n\r\nnss.getSuggestedItems(\"whisky label\").then(\r\n\tdata => {\r\n\t\t//response: { items: [ {itemId: '1', itemName: 'WHISKY RED LABEL' }, { itemId: '2', itemName: 'WHISKY BLACK LABEL' } ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n\r\n//get one item suggestions ordering by price, asc using a function and omitting the direction.\r\nlet orderByObject = {field: \"price\"};\r\n\r\nnss.getSuggestedItems(\"whisky label\", 1, orderByObject).then(\r\n\tdata => {\r\n\t\t//response: { items: [ { itemName: 'WHISKY BLACK LABEL', itemId: '2', price: 19.99, popularity: 0.9, thumbImg: 'whisky-black-label.png' } ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n  \r\n//get one item suggestions ordering by price, asc using a function.\r\nlet orderByFunc = ((x, y) => { return x.price > y.price; });\r\n\r\nnss.getSuggestedItems(\"whisky label\", 1, orderByFunc).then(\r\n\tdata => {\r\n\t\t//response: { items: [ { itemName: 'WHISKY BLACK LABEL', itemId: '2', price: 19.99, popularity: 0.9, thumbImg: 'whisky-black-label.png' } ], timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n)\r\n  \r\n  \r\n```\r\n\r\n\r\n### Insert items\r\nInsert a new item into the database.\r\n\r\nExamples of how to call the api and responses:\r\n```javascript\r\n\r\nlet newItem = {  \r\n\t\"itemId\": \"VODKA ABSOLUT\",\r\n\t\"itemName\": \"6\",\r\n\t\"keywords\": \"Keyword1, keyword2...\"\r\n\t};\r\n\r\nnss.insertItem(newItem).then(\r\n\tdata => {\r\n\t\t//response: { timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\nInsert an item with your properties names.\r\n```javascript\r\n\r\nlet newItem = {  \r\n\t\"id\": \"VODKA ABSOLUT\",\r\n\t\"nm\": \"6\",\r\n\t\"kw\": \"Keyword1, keyword2...\"\r\n\t};\r\n\r\nnss.insertItem(newItem, \"id\", \"nm\", \"kw\").then(\r\n\tdata => {\r\n\t\t//response: { timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\nInsert an item with additional fields (price, popularity and thumbImg). You can insert any additional field excluding itemId, itemName and keywords.\r\n```javascript\r\n\r\nlet newItem = {  \r\n\t\"itemId\": \"VODKA ABSOLUT\",\r\n\t\"itemName\": \"6\",\r\n\t\"keywords\": \"Keyword1, keyword2...\",\r\n\t\"price\": 25.57,\r\n\t\"popularity\": 1,\r\n\t\"thumbImg\": \"vodka-absolute.png\"\r\n\t};\r\n\r\nnss.insertItem(newItem).then(\r\n\tdata => {\r\n\t\t//response: { timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\n\r\n### Remove items\r\nRemove an item from the database.\r\n\r\nExamples of how to call the api and responses:\r\n```javascript\r\n\r\nlet itemId = \"6\";\r\n\r\nnss.removetItem(itemId).then(\r\n\tdata => {\r\n\t\t//response: { timeElapsed: '2ms' }\r\n\t},\r\n\terr => {\r\n\t\t//...\r\n\t}\r\n);\r\n\r\n```\r\n\r\n\r\n## Roadmap\r\n* catalog (several dictionaries)\r\n* More databases support\r\n* Inject your database plugin\r\n* filter stopwords\r\n* Browser version.\r\n\r\n\r\n## Pull requests\r\nIf you submit a pull request, thanks! There are a couple of rules to follow to make it manageable:\r\n* The pull request should be atomic, i.e. contain only one feature. If it contains more, please submit multiple pull requests.\r\n* Please stick to the current coding style. It's important that the code uses a coherent style for readability.\r\n* Update the readme accordingly.\r\n* Last but not least: The goal here is simplicity.\r\n\r\n\r\n## Bug reporting guidelines\r\nIf you report a bug, thank you! That said for the process to be manageable please strictly adhere to the following guidelines. I'll not be able to handle bug reports that don't:\r\n* Your bug report should be a self-containing project with a package.json for any dependencies you need. I need to run through a simple `npm install; node bugreport.js`.\r\n* It should use assertions to showcase the expected vs actual behavior.\r\n* Simplify as much as you can. Strip all your application-specific code.\r\n* Please explain precisely in the issue.\r\n* The code should be Javascript.\r\n\r\n\r\n## License \r\nSee [License](LICENSE)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ivanvaladares/Node-Suggestive-Search.git"
  },
  "scripts": {
    "test": "mocha -R list --timeout 10000"
  },
  "version": "1.9.2"
}

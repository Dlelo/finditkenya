{
  "_from": "express-mailer@^0.3.1",
  "_id": "express-mailer@0.3.1",
  "_inBundle": false,
  "_integrity": "sha1-yUvuWl0oe9em20yNRmNOLR+ukDc=",
  "_location": "/express-mailer",
  "_phantomChildren": {
    "aws-sdk": "2.0.5",
    "core-util-is": "1.0.2",
    "directmail": "0.1.8",
    "he": "0.3.6",
    "inherits": "2.0.3",
    "mailcomposer": "0.2.12",
    "public-address": "0.1.2",
    "simplesmtp": "0.3.35"
  },
  "_requested": {
    "escapedName": "express-mailer",
    "fetchSpec": "^0.3.1",
    "name": "express-mailer",
    "raw": "express-mailer@^0.3.1",
    "rawSpec": "^0.3.1",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-mailer/-/express-mailer-0.3.1.tgz",
  "_shasum": "c94bee5a5d287bd7a6db4c8d46634e2d1fae9037",
  "_shrinkwrap": null,
  "_spec": "express-mailer@^0.3.1",
  "_where": "/home/kev/express/findit",
  "author": {
    "email": "l-_-l@rgbboy.com",
    "name": "RGBboy"
  },
  "bugs": {
    "url": "https://github.com/RGBboy/express-mailer/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Daniel Bretoi",
      "email": "daniel@bretoi.com"
    }
  ],
  "dependencies": {
    "nodemailer": "^0.7.1"
  },
  "deprecated": false,
  "description": "Send Emails from your express application",
  "devDependencies": {
    "express": "^3.20.2",
    "jade": "^0.27.7",
    "mocha": "^1.5.0",
    "rewire": "^1.0.4",
    "should": "^1.2.2",
    "sinon": "^1.4.2",
    "superagent": "^0.9.10",
    "test-mailbox": "^0.0.6"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/RGBboy/express-mailer",
  "keywords": [
    "email",
    "express",
    "mail",
    "smtp"
  ],
  "main": "index",
  "name": "express-mailer",
  "optionalDependencies": {},
  "readme": "# express-mailer\n\nSend Emails from your application and response object.\n\n[![Build Status](https://secure.travis-ci.org/RGBboy/express-mailer.png)](http://travis-ci.org/RGBboy/express-mailer)\n\n## Note\n\nIf you have updated express-mailer from Version 0.1.2 or earlier there \nhave been major API changes. The `app.sendEmail` method no longer gets \nattached to the application. Instead a mailer object is attached. The \n`app.sendEmail` functionality can now be accessed via `app.mailer.send`.\n\n## Installation\n\nWorks with Express 3.x.x\n\n    $ npm install express-mailer\n\n## Usage\n\nExpress Mailer extends your express application\n\n```javascript\n// project/app.js\n\nvar app = require('express')(),\n    mailer = require('express-mailer');\n\nmailer.extend(app, {\n  from: 'no-reply@example.com',\n  host: 'smtp.gmail.com', // hostname\n  secureConnection: true, // use SSL\n  port: 465, // port for secure SMTP\n  transportMethod: 'SMTP', // default is SMTP. Accepts anything that nodemailer accepts\n  auth: {\n    user: 'gmail.user@gmail.com',\n    pass: 'userpass'\n  }\n});\n\n```\n\n## Views\n\nMailer views use the same render process as Express. You can use any view \nengine that Express supports. Setting up views for mailer is exactly the same \nas setting up views for Express. For example, to set the view directory to \n`project/views` and view engine to `jade` you would write:\n\n```javascript\n// project/app.js\n\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\n```\n\nThen we can write our templates in Jade:\n\n```javascript\n// project/views/email.jade\n\n!!! transitional\nhtml\n  head\n    meta(http-equiv = 'Content-Type', content = 'text/html; charset=UTF-8')\n    title= subject\n    body\n      h1.h1 Lorem ipsum\n      p\n        strong Lorem ipsum dolor: \n        | Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        br\n        |Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      h2.h2 Lorem ipsum\n      p Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      p Lorem ipsum:\n      ol\n        li Lorem ipsum dolor\n        li Lorem ipsum dolor\n        li Lorem ipsum dolor\n```\n\n## Sending an email\n\nYou can send an email by calling `app.mailer.send(template, locals, callback)`.\nTo send an email using the template above you could write:\n\n```javascript\napp.get('/', function (req, res, next) {\n  app.mailer.send('email', {\n    to: 'example@example.com', // REQUIRED. This can be a comma delimited string just like a normal email to field. \n    subject: 'Test Email', // REQUIRED.\n    otherProperty: 'Other Property' // All additional properties are also passed to the template as local variables.\n  }, function (err) {\n    if (err) {\n      // handle error\n      console.log(err);\n      res.send('There was an error sending the email');\n      return;\n    }\n    res.send('Email Sent');\n  });\n});\n```\n\nYou can also send an email by calling mailer on an applications response \nobject: `res.mailer.send(template, options, callback)`.\n\n## Nodemailer options\n\nIt is also possible to change the options supplied to nodemailers `sendMail` \nfunction. Instead of passing in the template name to `mailer.send` or \n`mailer.render` you can pass an object with any of the following fields:\n\n  * **template** - REQUIRED - The name of the template to render \n  * **from** - The e-mail address of the sender. All e-mail addresses can be plain `sender@server.com` or formatted `Sender Name <sender@server.com>`\n  * **to** - Comma separated list or an array of recipients e-mail addresses that will appear on the `To:` field\n  * **cc** - Comma separated list or an array of recipients e-mail addresses that will appear on the `Cc:` field\n  * **bcc** - Comma separated list or an array of recipients e-mail addresses that will appear on the `Bcc:` field\n  * **replyTo** - An e-mail address that will appear on the `Reply-To:` field\n  * **inReplyTo** - The message-id this message is replying\n  * **references** - Message-id list\n  * **subject** - The subject of the e-mail\n  * **headers** - An object of additional header fields `{\"X-Key-Name\": \"key value\"}` (NB! values are passed as is, you should do your own encoding to 7bit and folding if needed)\n  * **attachments** - An array of attachment objects.\n  * **alternatives** - An array of alternative text contents (in addition to text and html parts)\n  * **envelope** - optional SMTP envelope, if auto generated envelope is not suitable\n  * **messageId** - optional Message-Id value, random value will be generated if not set. Set to false to omit the Message-Id header\n  * **date** - optional Date value, current UTC string will be used if not set\n  * **encoding** - optional transfer encoding for the textual parts (defaults to \"quoted-printable\")\n  * **charset** - optional output character set for the textual parts (defaults to \"utf-8\")\n  * **dsn** - An object with methods `success`, `failure` and `delay`. If any of these are set to true, DSN will be used\n\nFor example you could cc others with the previous example like this:\n\n```javascript\napp.mailer.send(\n  {\n    template: 'email', // REQUIRED\n    cc: 'cc@example.com'\n  },\n  {\n    to: 'example@example.com',\n    subject: 'Test Email',\n    otherProperty: 'Other Property'\n  },\n  function (err) {\n    if (err) {\n      // handle error\n    };\n      // mail sent!\n  }\n);\n```\n\n## Updating the configuration\n\nYou can update your original configuration by calling `app.mailer.update(updatedOptions, callback)`.\nThis can be processor intensive so changes to your configuration are best kept to a minimum.\n\n## Rendering an email without sending\n\nYou can render an email without sending it by calling `app.mailer.render(template, locals, callback)`.\nThis can be used to check what an email will look like without sending it:\n\n```javascript\napp.get('/', function (req, res, next) {\n  res.mailer.render('email', {\n    to: 'example@example.com',\n    subject: 'Test Email',\n    otherProperty: 'Other Property'\n  }, function (err, message) {\n    if (err) {\n      // handle error\n      console.log(err);\n      res.send('There was an error rendering the email');\n      return;\n    }\n    res.header('Content-Type', 'text/plain');\n    res.send(message);\n  });\n});\n```\n\n## Notes\n\nMailchimp has a bunch of templates that may be a good starting point.\nCheck them out at https://github.com/mailchimp/Email-Blueprints\n\n## To Do\n\n* Add ability to curry the from address.\n* Add checking of options when .mailer.send is called.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2014 RGBboy &lt;l-_-l@rgbboy.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/RGBboy/express-mailer.git"
  },
  "scripts": {
    "spec": "make spec",
    "test": "make test",
    "unit": "make unit"
  },
  "version": "0.3.1"
}
